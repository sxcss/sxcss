$flex-basis: (
  1: null,
  2: calc(51% - #{map-deep-get($scale, proportion, sm)} / 2),
  3: calc(33.3333% - 1.5 * #{map-deep-get($scale, proportion, sm)} / 3),
  4: calc(25% - 2 * #{map-deep-get($scale, proportion, sm)} / 4),
  5: calc(25% - 2.5 * #{map-deep-get($scale, proportion, sm)} / 5),
  6: calc(25% - 3 * #{map-deep-get($scale, proportion, sm)} / 6),
  7: calc(14.2857% - 3.5 * #{map-deep-get($scale, proportion, sm)} / 7),
  8: calc(12.5% - 4 * #{map-deep-get($scale, proportion, sm)} / 8),
  9: calc(11.11% - 4.5 * #{map-deep-get($scale, proportion, sm)} / 9),
  10: calc(10% - 5 * #{map-deep-get($scale, proportion, sm)} / 10),
  11: calc(9.0909% - 5.5 * #{map-deep-get($scale, proportion, sm)} / 11),
  12: calc(8.3333% - 6 * #{map-deep-get($scale, proportion, sm)} / 12)
);

$font: (
  size: (
    xxs: xx-small,
    xs: x-small,
    sm: small,
    md: medium,
    lg: large,
    xl: x-large,
    xxl: xx-large
  ),
  weight: (
    thin: 100,
    extralight: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  ),
  style: (
    normal italic oblique inherit
  ),
  stretch: (
    normal,
    ultra-condensed,
    extra-condensed,
    condensed,
    semi-condensed,
    semi-expanded,
    expanded,
    extra-expanded,
    ultra-expanded
  ),
  variant: (
    normal,
    small-caps
  )
);

$media: (
  breakpoints: (
    "xxs": 240px,
    // Nokia 8810 and other super small screens like Smart Watches
      "xs": 375px,
    // Most of the smartsms including Galaxy S and ism 6/7/8/X,
      "sm": 420px,
    // Large Smartsms like ism XS Max/XR/6 Plus/7 Plus/8 Plus or Galaxy Note 9
      "ms": 767px,
    // All Devices smaller than Tablet,
      "md": 980px,
    // Tablets,
      "ml": 1080px,
    // iPad Pro & super small laptop screens
      "ls": 1280px,
    // Small laptops like MacBook 12"
      "lg": 1366px,
    // Most common laptop resolution
      "ll": 1440px,
    // MacBook Pro 13"
      "xl": 1580px,
    // MacBook Pro 15"
      "xxl": 1920px
  ),
  resolutions: (
    "nHD": (
      "(min-width: 640px)"
    ),
    "qHD": (
      "(min-width: 960px)"
    ),
    "HD": (
      "(min-width: 1280px)"
    ),
    "FHD": (
      "(min-width: 1920px)"
    ),
    "2K": (
      "(min-width: 2048px)"
    ),
    "QHD": (
      "(min-width: 2560px)"
    ),
    "UHD": (
      "(min-width: 3840px)"
    ),
    "4K": (
      "(min-width: 4096px)"
    ),
    "5K": (
      "(min-width: 5120px)"
    ),
    "UHD-2": (
      "(min-width: 7680px)"
    ),
    "8K": (
      "(min-width: 8192px)"
    ),
    "retina2x": (
      "(-webkit-min-device-pixel-ratio: 2)",
      "(min-resolution: 192dpi)"
    ),
    "retina3x": (
      "(-webkit-min-device-pixel-ratio: 3)",
      "(min-resolution: 350dpi)"
    )
  ),
  types: (
    "screen": "screen",
    "print": "print",
    "handheld": "handheld"
  )
) !default;

$unit-intervals: (
  "px": 1,
  "em": 0.01,
  "rem": 0.1
) !default;
$scale: (
  percent: (
    "10": 10%,
    "20": 20%,
    "25": 25%,
    "33": 33%,
    "40": 40%,
    "45": 45%,
    "50": 50%,
    "60": 60%,
    "67": 66.67%,
    "75": 75%,
    "80": 80%,
    "90": 90%,
    "100": 100%
  ),
  decimal: (
    "01": 0.1,
    "02": 0.2,
    "03": 0.3,
    "04": 0.4,
    "05": 0.5,
    "06": 0.6,
    "07": 0.7,
    "08": 0.8,
    "09": 0.9,
    "1": 1
  ),
  proportion: (
    "xxs": 0.5rem,
    "xs": 1rem,
    "sm": 1.5rem,
    "ms": 2rem,
    "md": 3rem,
    "ml": 5rem,
    "lg": 6rem,
    "xl": 8rem,
    "xxl": 10rem
  )
);

$transition: (
  timing-function: (
    ease,
    linear,
    ease-in,
    ease-out,
    ease-in-out
  ),
  duration: (
    xxs: 0.1s,
    xs: 0.2s,
    sm: 0.3s,
    ms: 0.4s,
    md: 0.5s,
    ml: 0.6s,
    lg: 0.7s,
    xl: 0.8s,
    xxl: 0.9s
  )
);

$z-index: (
  layer-0: 0,
  layer-1: 9,
  layer-2: 99,
  layer-3: 999,
  layer-4: 9999,
  layer-5: 999999,
  layer-6: 9999999,
  layer-7: 99999999,
  layer-8: 999999999,
  layer-9: 9999999999,
  layer-10: 99999999999,
  layer-11: 999999999999,
  layer-12: 9999999999999
);

/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */

/* Document
   ========================================================================== */

/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */

html {
  line-height: 1.15; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/* Sections
   ========================================================================== */

/**
 * Remove the margin in all browsers.
 */

body {
  margin: 0;
}

/**
 * Render the `main` element consistently in IE.
 */

main {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */

hr {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/* Text-level semantics
   ========================================================================== */

/**
 * Remove the gray background on active links in IE 10.
 */

a {
  background-color: transparent;
}

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */

abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  text-decoration: underline dotted; /* 2 */
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */

b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */

code,
kbd,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
 * Add the correct font size in all browsers.
 */

small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */

/**
 * Remove the border on images inside links in IE 10.
 */

img {
  border-style: none;
}

/* Forms
   ========================================================================== */

/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */

button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */

button,
input {
  /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */

button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */

button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

/**
 * Remove the inner border and padding in Firefox.
 */

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */

fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */

legend {
  box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */

progress {
  vertical-align: baseline;
}

/**
 * Remove the default vertical scrollbar in IE 10+.
 */

textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */

[type="checkbox"],
[type="radio"] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */

[type="search"] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */

[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */

::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive
   ========================================================================== */

/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */

details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */

summary {
  display: list-item;
}

/* Misc
   ========================================================================== */

/**
 * Add the correct display in IE 10+.
 */

template {
  display: none;
}

/**
 * Add the correct display in IE 10.
 */

[hidden] {
  display: none;
}

html {
  box-sizing: border-box;
  height: 100%;
}

* {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;

  &,
  &::after,
  &::before {
    box-sizing: border-box;
  }
}

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  vertical-align: baseline;
  margin: 0;
  padding: 0;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}

body {
  height: 100%;
  line-height: 1.5;
  overflow-x: hidden;
}

blockquote,
q {
  quotes: none;
}

blockquote {
  &:before,
  &:after {
    content: "";
    content: none;
  }
}

q {
  &:before,
  &:after {
    content: "";
    content: none;
  }
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

button,
input,
textarea,
select,
option {
  appearance: none;
  &:focus,
  &:active {
    outline: none;
  }
}

a {
  cursor: pointer;
}

img {
  max-width: 100%;
}

input,
textarea {
  color: currentColor;
}

a,
button {
  cursor: pointer;
}

input[type="search"]::-webkit-search-cancel-button {
  display: none;
}

input[type="search"]::-ms-clear {
  display: none;
}

*,
*:focus,
*:active {
  -webkit-tap-highlight-color: transparent;
}

input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

@mixin transition($transition) {
  transition: $transition;
}

@mixin width($width) {
  width: $width;
}

@mixin min-width($width) {
  min-width: $width;
}

@mixin max-width($width) {
  max-width: $width;
}

$flex-basis: (
  1: null,
  2: calc(51% - #{map-deep-get($scale, proportion, sm)} / 2),
  3: calc(33.3333% - 1.5 * #{map-deep-get($scale, proportion, sm)} / 3),
  4: calc(25% - 2 * #{map-deep-get($scale, proportion, sm)} / 4),
  5: calc(25% - 2.5 * #{map-deep-get($scale, proportion, sm)} / 5),
  6: calc(25% - 3 * #{map-deep-get($scale, proportion, sm)} / 6),
  7: calc(14.2857% - 3.5 * #{map-deep-get($scale, proportion, sm)} / 7),
  8: calc(12.5% - 4 * #{map-deep-get($scale, proportion, sm)} / 8),
  9: calc(11.11% - 4.5 * #{map-deep-get($scale, proportion, sm)} / 9),
  10: calc(10% - 5 * #{map-deep-get($scale, proportion, sm)} / 10),
  11: calc(9.0909% - 5.5 * #{map-deep-get($scale, proportion, sm)} / 11),
  12: calc(8.3333% - 6 * #{map-deep-get($scale, proportion, sm)} / 12)
);

$font: (
  size: (
    xxs: xx-small,
    xs: x-small,
    sm: small,
    md: medium,
    lg: large,
    xl: x-large,
    xxl: xx-large
  ),
  weight: (
    thin: 100,
    extralight: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  ),
  style: (
    normal italic oblique inherit
  ),
  stretch: (
    normal,
    ultra-condensed,
    extra-condensed,
    condensed,
    semi-condensed,
    semi-expanded,
    expanded,
    extra-expanded,
    ultra-expanded
  ),
  variant: (
    normal,
    small-caps
  )
);

$media: (
  breakpoints: (
    "xxs": 240px,
    // Nokia 8810 and other super small screens like Smart Watches
      "xs": 375px,
    // Most of the smartsms including Galaxy S and ism 6/7/8/X,
      "sm": 420px,
    // Large Smartsms like ism XS Max/XR/6 Plus/7 Plus/8 Plus or Galaxy Note 9
      "ms": 767px,
    // All Devices smaller than Tablet,
      "md": 980px,
    // Tablets,
      "ml": 1080px,
    // iPad Pro & super small laptop screens
      "ls": 1280px,
    // Small laptops like MacBook 12"
      "lg": 1366px,
    // Most common laptop resolution
      "ll": 1440px,
    // MacBook Pro 13"
      "xl": 1580px,
    // MacBook Pro 15"
      "xxl": 1920px
  ),
  resolutions: (
    "nHD": (
      "(min-width: 640px)"
    ),
    "qHD": (
      "(min-width: 960px)"
    ),
    "HD": (
      "(min-width: 1280px)"
    ),
    "FHD": (
      "(min-width: 1920px)"
    ),
    "2K": (
      "(min-width: 2048px)"
    ),
    "QHD": (
      "(min-width: 2560px)"
    ),
    "UHD": (
      "(min-width: 3840px)"
    ),
    "4K": (
      "(min-width: 4096px)"
    ),
    "5K": (
      "(min-width: 5120px)"
    ),
    "UHD-2": (
      "(min-width: 7680px)"
    ),
    "8K": (
      "(min-width: 8192px)"
    ),
    "retina2x": (
      "(-webkit-min-device-pixel-ratio: 2)",
      "(min-resolution: 192dpi)"
    ),
    "retina3x": (
      "(-webkit-min-device-pixel-ratio: 3)",
      "(min-resolution: 350dpi)"
    )
  ),
  types: (
    "screen": "screen",
    "print": "print",
    "handheld": "handheld"
  )
) !default;

$unit-intervals: (
  "px": 1,
  "em": 0.01,
  "rem": 0.1
) !default;
$scale: (
  percent: (
    "10": 10%,
    "20": 20%,
    "25": 25%,
    "33": 33%,
    "40": 40%,
    "45": 45%,
    "50": 50%,
    "60": 60%,
    "67": 66.67%,
    "75": 75%,
    "80": 80%,
    "90": 90%,
    "100": 100%
  ),
  decimal: (
    "01": 0.1,
    "02": 0.2,
    "03": 0.3,
    "04": 0.4,
    "05": 0.5,
    "06": 0.6,
    "07": 0.7,
    "08": 0.8,
    "09": 0.9,
    "1": 1
  ),
  proportion: (
    "xxs": 0.5rem,
    "xs": 1rem,
    "sm": 1.5rem,
    "ms": 2rem,
    "md": 3rem,
    "ml": 5rem,
    "lg": 6rem,
    "xl": 8rem,
    "xxl": 10rem
  )
);

$transition: (
  timing-function: (
    ease,
    linear,
    ease-in,
    ease-out,
    ease-in-out
  ),
  duration: (
    xxs: 0.1s,
    xs: 0.2s,
    sm: 0.3s,
    ms: 0.4s,
    md: 0.5s,
    ml: 0.6s,
    lg: 0.7s,
    xl: 0.8s,
    xxl: 0.9s
  )
);

$z-index: (
  layer-0: 0,
  layer-1: 9,
  layer-2: 99,
  layer-3: 999,
  layer-4: 9999,
  layer-5: 999999,
  layer-6: 9999999,
  layer-7: 99999999,
  layer-8: 999999999,
  layer-9: 9999999999,
  layer-10: 99999999999,
  layer-11: 999999999999,
  layer-12: 9999999999999
);

@function map-deep-get($map, $submapKey, $keys...) {
  $iterable: map-get($map, $submapKey);

  @each $key in $keys {
    $map: map-get($iterable, $key);
  }

  @return $map;
}

@function map-deep-has-key($map, $map-key, $keys...) {
  @each $key in $keys {
    $tmp: map-deep-get($map, $map-key, $key);
    @if $tmp != null {
      @return true;
    }
  }
  @return false;
}

@function to-number($string) {
  // Matrices
  $strings: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
  $numbers: 0 1 2 3 4 5 6 7 8 9;

  // Result
  $result: 0;
  $divider: 0;
  $minus: false;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);

    @if $character == "-" {
      $minus: true;
    } @else if $character == "." {
      $divider: 1;
    } @else {
      @if type-of($index) != "number" {
        $result: if($minus, $result * -1, $result);
        @return _length($result, str-slice($string, $i));
      }

      $number: nth($numbers, $index);

      @if $divider == 0 {
        $result: $result * 10;
      } @else {
        // Move the decimal dot to the left
        $divider: $divider * 10;
        $number: $number / $divider;
      }

      $result: $result + $number;
    }
  }

  @return if($minus, $result * -1, $result);
}

@function _size($number, $unit) {
  $strings: "px" "cm" "mm" "%" "ch" "pica" "in" "em" "rem" "pt" "pc" "ex" "vw"
    "vh" "vmin" "vmax";
  $units: 1px 1cm 1mm 1% 1ch 1pica 1in 1em 1rem 1pt 1pc 1ex 1vw 1vh 1vmin 1vmax;
  $index: index($strings, $unit);

  @if type-of($index) != "number" {
    @warn 'Unknown unit `#{$unit}`.';
    @return false;
  }

  @return $number * nth($units, $index);
}

// @import 'pseudo-classes/pseudo-classes'; // TBD
// @import 'pseudo-elements/pseudo-elements'; // TBD
// @import 'pseudo-selectors/pseudo-selectors'; // TBD

@for $i from 1 through 12 {
  @each $gap-key, $gap-value in map-get($scale, proportion) {
    @if $gap-key == "xs" {
      .grid-layout--#{$i}-col {
        @include grid-layout(
          $grid-cols: $i,
          $grid-cols-fr: 1fr,
          $grid-gap: map-deep-get($scale, proportion, $gap-key)
        );
      }
    } @else {
      .grid-layout--#{$i}-col--gap--#{$gap-key} {
        @include grid-layout($grid-cols: $i, $grid-cols-fr: 1fr);
      }
    }
  }
}

.no-scroll {
  overflow-y: hidden;
}

.visibility--hidden {
  visibility: hidden;
}

.overflow {
  &--hidden {
    overflow: hidden;
  }

  &__x--hidden {
    overflow-x: hidden;
  }

  &__y--hidden {
    overflow-y: hidden;
  }
}

.object-fit {
  &--cover,
  &--cvr {
    object-fit: cover;
  }

  &--contain,
  &--ctn {
    object-fit: contain;
  }
}

.hide {
  &--desktop {
    @media all and (max-width: 980px) {
      @include hide;
    }
  }

  &--mobile {
    @media all and (min-width: 981px) {
      @include hide;
    }
  }

  &--tablet {
    @media (min-width: 768px) and (max-width: 980px) {
      @include hide;
    }
  }

  &--phone {
    @media all and (max-width: 767px) {
      @include hide;
    }
  }
}

.hover,
.hvr {
  &-opacity,
  &-opc {
    &--xxs {
      @include hover($opacity: map-get($opacity, xxs));
    }

    &--xs {
      @include hover($opacity: map-get($opacity, xs));
    }

    &--sm {
      @include hover($opacity: map-get($opacity, sm));
    }

    &--ms {
      @include hover($opacity: map-get($opacity, ms));
    }

    &--md {
      @include hover($opacity: map-get($opacity, md));
    }

    &--ml {
      @include hover($opacity: map-get($opacity, ml));
    }

    &--lg {
      @include hover($opacity: map-get($opacity, lg));
    }

    &--xl {
      @include hover($opacity: map-get($opacity, xl));
    }

    &--xxl {
      @include hover($opacity: map-get($opacity, xxl));
    }
  }

  &-transform,
  &-tfm {
    &--xxs {
      @include hover($transform: map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include hover($transform: map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include hover($transform: map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include hover($transform: map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include hover($transform: map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include hover($transform: map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include hover($transform: map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include hover($transform: map-deep-get($scale, proportion, xl));
    }

    &--xxl {
      @include hover($transform: map-deep-get($scale, proportion, xxl));
    }
  }

  &-scale,
  &-scl {
    &--xxs {
      @include hover($scale: map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include hover($scale: map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include hover($scale: map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include hover($scale: map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include hover($scale: map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include hover($scale: map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include hover($scale: map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include hover($scale: map-deep-get($scale, proportion, xl));
    }

    &--xxl {
      @include hover($scale: map-deep-get($scale, proportion, xxl));
    }
  }
}

.align,
.an {
  &-content,
  &-ct {
    &--start,
    &--s {
      @include align-content(flex-start);
    }

    &--end,
    &--e {
      @include align-content(flex-end);
    }

    &--center,
    &--c {
      @include align-content(center);
    }
  }

  &-items,
  &--is {
    &--start,
    &--s {
      @include align-items(flex-start);
    }

    &--end,
    &--e {
      @include align-items(flex-end);
    }

    &--center,
    &--c {
      @include align-items(center);
    }
  }

  &-self,
  &-sf {
    &--start,
    &--s {
      @include align-self(flex-start);
    }

    &--end,
    &--e {
      @include align-self(flex-end);
    }

    &--center,
    &--c {
      @include align-self(center);
    }
  }
}

.appearance {
  @each $engine, $values in $appearance {
    &--#{$engine} {
      @each $value in $values {
        &-#{$value} {
          -#{$engine}-appearance: #{$value};
        }
      }
    }
  }
}

.background,
.bg {
  @each $property, $values in $background {
    @if $property != color {
      &-#{$property} {
        @each $value in $values {
          &--#{$value} {
            background-#{$property}: #{$value};
          }
        }
      }
    } @else {
      &-#{$property} {
        @each $key, $value in $values {
          &--#{$key} {
            background-#{$property}: #{$value};
          }
        }
      }
    }
  }
}

// TBD

.border,
.bdr {
  /// Native values

  @each $property, $values in $border {
    &-#{$property} {
      @each $value in $values {
        &-#{$value} {
          border-#{$property}: #{$value};
        }
      }
    }
  }

  /// Scaled values

  @each $key, $value in map-get($scale, proportion) {
    &-radius--#{$key},
    &-rds--#{$key} {
      @include border-radius(map-deep-get($scale, proportion, $key));
    }

    &-width--#{$key},
    &-w--#{$key} {
      @include border-width(map-deep-get($scale, proportion, $key));
    }
  }

  @each $key, $value in map-get($scale, percent) {
    &-radius--#{$key},
    &-rds--#{$key} {
      @include border-radius(map-deep-get($scale, percent, $key));
    }

    &-width--#{$key},
    &-w--#{$key} {
      @include border-width(map-deep-get($scale, percent, $key));
    }
  }
}

.bottom,
.btm {
  @each $key, $value in map-get($scale, proportion) {
    &--#{$key} {
      @include bottom(map-deep-get($scale, proportion, $key));
    }
  }

  @each $key, $value in map-get($scale, percent) {
    &--#{$key} {
      @include bottom(map-deep-get($scale, percent, $key));
    }
  }
}

.clear {
  @each $value in $clear {
    &--#{$value} {
      @include clear($value);
    }
  }
}

.color,
.clr {
  &--black,
  &--blk {
    @include color(map-get($color, black));
  }

  &--white,
  &--wht {
    @include color(map-get($color, white));
  }

  &--primary,
  &--pry {
    @include color(map-get($color, primary));
  }

  &--secondary,
  &--scd {
    @include color(map-get($color, secondary));
  }

  &--light-gray,
  &--lt-gr {
    @include color(map-get($color, light-gray));
  }

  &--dark-gray,
  &--drk-gr {
    @include color(map-get($color, dark-gray));
  }
}

@each $filter-function in $filter-functions {
  // $i: #{$i}#{'%'};
  @for $i from 1 through 100 {
    @if $i % 10 == 0 {
      @if $filter-function != "drop-shadow" {
        .filter--#{$filter-function}--#{$i} {
          @include filter($filter-function, #{$i * 1%});
        }
      } // @else { TBD for drop-shadow()
      // .filter--#{$filter-function} {
      // @include filter(#{$filter-function}($i));
      // }
      //}
    }
  }
}

.flex,
.flx {
  @include display(flex);

  &-wrap,
  &-wrp {
    &--wrap,
    &--wrp {
      @include display(flex);
      @include flex-wrap(wrap);
    }

    &--wrap,
    &--nowrp {
      @include display(flex);
      @include flex-wrap(nowrap);
    }
  }

  &-basis,
  &-bas {
    @for $i from 1 through 12 {
      &--#{$i}-col,
      &--#{$i} {
        @include flex-basis(map-get($flex-basis, $i));
      }
    }
  }
}

.grid,
.grd {
  @include display(grid);

  &-template,
  &-tmp {
    &-columns,
    &-cols {
      @for $i from 1 through 12 {
        &--#{repeat}-#{$i}-#{1fr},
        &--rpt-#{$i}-#{1fr} {
          @include grid-template-columns(repeat($i, 1fr));
        }
        &--#{repeat}-#{$i}-#{auto},
        &--rpt-#{$i}-#{auto} {
          @include grid-template-columns(repeat($i, auto));
        }
      }
    }

    &-rows {
      @for $i from 1 through 12 {
        &--#{repeat}-#{$i}-#{1fr},
        &--rpt-#{$i}-#{1fr} {
          @include grid-template-rows(repeat($i, 1fr));
        }
        &--#{repeat}-#{$i}-#{auto},
        &--rpt-#{$i}-#{auto} {
          @include grid-template-rows(repeat($i, auto));
        }
      }
    }
  }
}

.height,
.h {
  @each $key, $value in map-get($scale, proportion) {
    &--#{$key} {
      @include height(map-deep-get($scale, proportion, $key));
    }
  }

  @each $key, $value in map-get($scale, percent) {
    &--#{$key} {
      @include height(map-deep-get($scale, percent, $key));
    }
  }

  @for $i from 2 through 10 {
    @each $key, $value in map-get($scale, proportion) {
      @if $key !=
        10 and
        $key !=
        20 and
        $key !=
        25 and
        $key !=
        33 and
        $key !=
        40 and
        $key !=
        45 and
        $key !=
        50 and
        $key !=
        60 and
        $key !=
        67 and
        $key !=
        75 and
        $key !=
        80 and
        $key !=
        90 and
        $key !=
        100 and
        $key !=
        50vh and
        $key !=
        100vh and
        $key !=
        50vw and
        $key !=
        100vw
      {
        &--#{$i}#{$key} {
          @include height(
            calc(#{$i} * #{map-deep-get($scale, proportion, $key)})
          );
        }
      }
    }
  }
}

.min-height,
.min-h {
  @each $key, $value in map-get($scale, proportion) {
    &--#{$key} {
      @include min-height(map-deep-get($scale, proportion, $key));
    }
  }

  @each $key, $value in map-get($scale, percent) {
    &--#{$key} {
      @include min-height(map-deep-get($scale, percent, $key));
    }
  }

  @for $i from 2 through 10 {
    @each $key, $value in map-get($scale, proportion) {
      @if $key !=
        10 and
        $key !=
        20 and
        $key !=
        25 and
        $key !=
        33 and
        $key !=
        40 and
        $key !=
        45 and
        $key !=
        50 and
        $key !=
        60 and
        $key !=
        67 and
        $key !=
        75 and
        $key !=
        80 and
        $key !=
        90 and
        $key !=
        100 and
        $key !=
        50vh and
        $key !=
        100vh and
        $key !=
        50vw and
        $key !=
        100vw
      {
        &--#{$i}#{$key} {
          @include min-height(
            calc(#{$i} * #{map-deep-get($scale, proportion, $key)})
          );
        }
      }
    }
  }
}

.max-height,
.max-h {
  @each $key, $value in map-get($scale, proportion) {
    &--#{$key} {
      @include max-height(map-deep-get($scale, proportion, $key));
    }
  }

  @each $key, $value in map-get($scale, percent) {
    &--#{$key} {
      @include max-height(map-deep-get($scale, percent, $key));
    }
  }

  @for $i from 2 through 10 {
    @each $key, $value in map-get($scale, proportion) {
      @if $key !=
        10 and
        $key !=
        20 and
        $key !=
        25 and
        $key !=
        33 and
        $key !=
        40 and
        $key !=
        45 and
        $key !=
        50 and
        $key !=
        60 and
        $key !=
        67 and
        $key !=
        75 and
        $key !=
        80 and
        $key !=
        90 and
        $key !=
        100 and
        $key !=
        50vh and
        $key !=
        100vh and
        $key !=
        50vw and
        $key !=
        100vw
      {
        &--#{$i}#{$key} {
          @include max-height(
            calc(#{$i} * #{map-deep-get($scale, proportion, $key)})
          );
        }
      }
    }
  }
}

// @import 'backface-visibility'; - in consideration

// @import 'bleed'; - in consideration
// @import 'block-overflow'; - in consideration

// @import 'caret-color'; - TBD

// @import 'clip-path'; - TBD
// @import 'columns'; - TBD
// @import 'content'; - TBD
// @import 'counter-increment'; - TBD
//
// @import 'cursor'; - TBD
// @import 'display'; - TBD
// @import 'fill'; - TBD

// @import 'float'; - TBD
// @import 'font'; - TBD

// @import 'hanging-punctuation'; - TBD

// @import 'hyphens'; - TBD
// @import 'image-rendering'; - TBD
// @import 'initial-letter'; - TBD
// @import 'isolation'; - TBD

// @import 'letter-spacing'; - TBD
// @import 'line-clamp'; - TBD
// @import 'line-height'; - TBD

// @import 'mix-blend-mode'; - TBD

//

// @import 'outline'; - TBD
// @import 'overflow'; - TBD

// @import 'perspective'; - TBD

// @import 'pointer-events'; - TBD

// @import 'resize'; - TBD

// @import 'scroll'; - TBD
// @import 'speak'; - TBD
// @import 'stroke'; - TBD
// @import 'tab-size'; - TBD

// @import 'transform'; - TBD

// @import 'vertical-align'; - TBD
// @import 'visibility'; - TBD
// @import 'white-space'; - TBD

// @import 'word'; - TBD
// @import 'z-index'; - TBD
// @import 'zoom'; - TBD

.justify,
.jsf {
  &-content,
  &-cnt {
    &--start,
    &--str {
      @include justify-content(flex-start);
    }

    &--end {
      @include justify-content(flex-end);
    }

    &--center,
    &--ctr {
      @include justify-content(center);
    }

    &--space-between,
    &--spc--btw {
      @include justify-content(space-between);
    }

    &--space-around,
    &--spc-ard {
      @include justify-content(space-around);
    }
  }

  &-items {
    &--start,
    &--str {
      @include justify-items(flex-start);
    }

    &--end {
      @include justify-items(flex-end);
    }

    &--center,
    &--ctr {
      @include justify-items(center);
    }
  }

  &-self {
    &--start,
    &--str {
      @include justify-self(flex-start);
    }

    &--end {
      @include justify-self(flex-end);
    }

    &--center,
    &--ctr {
      @include justify-self(center);
    }
  }
}

.left {
  @each $key, $value in map-get($scale, proportion) {
    &--#{$key} {
      @include left(map-deep-get($scale, proportion, $key));
    }
  }

  @each $key, $value in map-get($scale, percent) {
    &--#{$key} {
      @include left(map-deep-get($scale, percent, $key));
    }
  }
}

.list-style,
.lst-st {
  & {
    &--none {
      @include list-style(none);
    }

    &__position,
    &__pos {
      &--inside,
      &--ins {
        @include list-style-positon(inside);
      }

      &--outside,
      &--out {
        @include list-style-positon(outside);
      }
    }

    &__type,
    &__typ {
      &--circle,
      &--ccl {
        @include list-style-type(circle);
      }

      &--decimal,
      &--dec {
        @include list-style-type(decimal);
      }

      &--latin,
      &--lat {
        @include list-style-type(upper-latin);

        &--roman,
        &--rom {
          @include list-style-type(upper-roman);
        }

        &--latin,
        &--lat {
          @include list-style-type(lower-latin);
        }
      }

      &--roman,
      &--rom {
        @include list-style-type(lower-roman);
      }
    }
  }
}

.margin,
.m {
  & {
    &--0 {
      @include margin(0);
    }

    &--auto {
      @include margin(auto);
    }

    &--xxs {
      @include margin(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin(map-deep-get($scale, proportion, lg));
    }
  }

  &-x {
    &--0 {
      @include margin-x(0);
    }

    &--auto {
      @include margin-x(auto);
    }

    &--xxs {
      @include margin-x(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin-x(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin-x(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin-x(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin-x(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin-x(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin-x(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin-x(map-deep-get($scale, proportion, xl));
    }
  }

  &-y {
    &--0 {
      @include margin-y(0);
    }

    &--auto {
      @include margin-y(auto);
    }

    &--xxs {
      @include margin-y(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin-y(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin-y(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin-y(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin-y(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin-y(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin-y(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin-y(map-deep-get($scale, proportion, xl));
    }
  }

  &-left,
  &-l {
    &--0 {
      @include margin-left(0);
    }

    &--auto {
      @include margin-left(auto);
    }

    &--xxs {
      @include margin-left(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin-left(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin-left(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin-left(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin-left(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin-left(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin-left(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin-left(map-deep-get($scale, proportion, xl));
    }
  }

  &-right,
  &-r {
    &--0 {
      @include margin-right(0);
    }

    &--auto {
      @include margin-right(auto);
    }

    &--xxs {
      @include margin-right(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin-right(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin-right(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin-right(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin-right(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin-right(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin-right(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin-right(map-deep-get($scale, proportion, xl));
    }
  }

  &-top,
  &-t {
    &--0 {
      @include margin-top(0);
    }

    &--xxs {
      @include margin-top(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin-top(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin-top(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin-top(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin-top(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin-top(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin-top(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin-top(map-deep-get($scale, proportion, xl));
    }
  }

  &-bottom,
  &-b {
    &--0 {
      @include margin-bottom(0);
    }

    &--xxs {
      @include margin-bottom(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin-bottom(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin-bottom(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin-bottom(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin-bottom(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin-bottom(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin-bottom(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin-bottom(map-deep-get($scale, proportion, xl));
    }
  }
}

.object,
.o {
  &-fit,
  &-f {
    &--cover,
    &--cvr {
      @include object-fit(cover);
    }

    &--contain,
    &--ctn {
      @include object-fit(contain);
    }
  }
}

// TBD
// Not yet supported in Firefox and Safari

.opacity,
.opc {
  @each $property, $values in $scale {
    @if $property == "decimal" {
      @each $key, $value in $values {
        &--#{$key} {
          @include opacity($value);
        }
      }
    }
  }
}

.order {
  @for $i from 1 through 20 {
    &--#{$i} {
      @include order($i);
    }
  }
}

.margin,
.m {
  & {
    &--0 {
      @include margin(0);
    }

    &--xxs {
      @include margin(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin(map-deep-get($scale, proportion, lg));
    }
  }

  &-x {
    &--0 {
      @include margin-x(0);
    }

    &--xxs {
      @include margin-x(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin-x(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin-x(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin-x(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin-x(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin-x(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin-x(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin-x(map-deep-get($scale, proportion, xl));
    }
  }

  &-y {
    &--0 {
      @include margin-y(0);
    }

    &--xxs {
      @include margin-y(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin-y(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin-y(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin-y(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin-y(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin-y(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin-y(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin-y(map-deep-get($scale, proportion, xl));
    }
  }

  &-left,
  &-l {
    &--0 {
      @include margin-left(0);
    }

    &--xxs {
      @include margin-left(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin-left(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin-left(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin-left(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin-left(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin-left(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin-left(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin-left(map-deep-get($scale, proportion, xl));
    }
  }

  &-right,
  &-r {
    &--0 {
      @include margin-right(0);
    }

    &--xxs {
      @include margin-right(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin-right(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin-right(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin-right(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin-right(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin-right(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin-right(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin-right(map-deep-get($scale, proportion, xl));
    }
  }

  &-top,
  &-t {
    &--0 {
      @include margin-top(0);
    }

    &--xxs {
      @include margin-top(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin-top(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin-top(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin-top(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin-top(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin-top(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin-top(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin-top(map-deep-get($scale, proportion, xl));
    }
  }

  &-bottom,
  &-b {
    &--0 {
      @include margin-bottom(0);
    }

    &--xxs {
      @include margin-bottom(map-deep-get($scale, proportion, xxs));
    }

    &--xs {
      @include margin-bottom(map-deep-get($scale, proportion, xs));
    }

    &--sm {
      @include margin-bottom(map-deep-get($scale, proportion, sm));
    }

    &--ms {
      @include margin-bottom(map-deep-get($scale, proportion, ms));
    }

    &--md {
      @include margin-bottom(map-deep-get($scale, proportion, md));
    }

    &--ml {
      @include margin-bottom(map-deep-get($scale, proportion, ml));
    }

    &--lg {
      @include margin-bottom(map-deep-get($scale, proportion, lg));
    }

    &--xl {
      @include margin-bottom(map-deep-get($scale, proportion, xl));
    }
  }
}

.place {
  &-content,
  &-cnt {
    &--center,
    &--ctr {
      @include place-content(center);

      &--start,
      &--str {
        @include place-content(center flex-start);
      }

      &--end {
        @include place-content(center flex-end);
      }
    }

    &--start,
    &--str {
      @include place-content(flex-start);

      &--center,
      &--ctr {
        @include place-content(flex-start center);
      }

      &--end {
        @include place-content(flex-start flex-end);
      }
    }

    &--end {
      @include place-items(flex-end);

      &--start,
      &--str {
        @include place-items(flex-end flex-start);
      }

      &--center,
      &--ctr {
        @include place-items(flex-end center);
      }
    }
  }

  &-items,
  &-its {
    &--center,
    &--ctr {
      @include place-items(center);

      &--start,
      &--str {
        @include place-items(center flex-start);
      }

      &--end {
        @include place-items(center flex-end);
      }
    }

    &--start,
    &--str {
      @include place-items(flex-start);

      &--center,
      &--ctr {
        @include place-items(flex-start center);
      }

      &--end {
        @include place-items(flex-start flex-end);
      }
    }

    &--end {
      @include place-items(flex-end);

      &--start,
      &--str {
        @include place-items(flex-end flex-start);
      }

      &--center,
      &--ctr {
        @include place-items(flex-end center);
      }
    }
  }

  &-self,
  &-slf {
    &--center,
    &--ctr {
      @include place-self(center);

      &--start,
      &--str {
        @include place-self(center flex-start);
      }

      &--end {
        @include place-self(center flex-end);
      }
    }

    &--start,
    &--str {
      @include place-self(flex-start);

      &--center,
      &--ctr {
        @include place-self(flex-start center);
      }

      &--end {
        @include place-self(flex-start flex-end);
      }
    }

    &--end {
      @include place-items(flex-end);

      &--start,
      &--str {
        @include place-items(flex-end flex-start);
      }

      &--center,
      &--ctr {
        @include place-items(flex-end center);
      }
    }
  }
}

.position,
.pos {
  &-relative,
  &-rel {
    @include position(relative);
  }

  &-fixed,
  &-fix {
    @include position(fixed);

    &--top {
      @include position($position: fixed, $top: 0);
    }

    &--right,
    &--btm {
      @include position($position: fixed, $bottom: 0);
    }
  }

  &-absolute,
  &-abs {
    @include position(absolute);

    &--center,
    &--ctr {
      @include position(
        $position: absolute,
        $left: 50%,
        $top: 50%,
        $transform: translate(-50%, -50%)
      );
    }

    &--center-top,
    &--ctr-top {
      @include position(
        $position: absolute,
        $left: 50%,
        $top: 0,
        $transform: translate(-50%, -100%)
      );
    }

    &--center-bottom,
    &--ctr-btm {
      @include position(
        $position: absolute,
        $left: 50%,
        $top: 100%,
        $transform: translate(-50%, 0)
      );
    }

    &--left-top,
    &--lft-top {
      @include position(
        $position: absolute,
        $left: 0,
        $top: 0,
        $transform: translate(-100%, -100%)
      );
    }

    &--left-bottom,
    &--lft-btm {
      @include position(
        $position: absolute,
        $left: 0,
        $top: 100%,
        $transform: translate(-100%, 0)
      );
    }

    &--left-center,
    &--lft-ctr {
      @include position(
        $position: absolute,
        $left: 0,
        $top: 50%,
        $transform: translate(-100%, -50%)
      );
    }

    &--right-top,
    &--rgt-top {
      @include position(
        $position: absolute,
        $left: 100%,
        $top: 0,
        $transform: translate(-100%, -100%)
      );
    }

    &--right-bottom,
    &--rgt-btm {
      @include position(
        $position: absolute,
        $left: 100%,
        $top: 100%,
        $transform: translate(-100%, 0)
      );
    }

    &--right-center,
    &--rgt-ctr {
      @include position(
        $position: absolute,
        $left: 100%,
        $top: 50%,
        $transform: translate(-100%, -50%)
      );
    }
  }
}

.right {
  @each $key, $value in map-get($scale, proportion) {
    &--#{$key} {
      @include right(map-deep-get($scale, proportion, $key));
    }
  }

  @each $key, $value in map-get($scale, percent) {
    &--#{$key} {
      @include right(map-deep-get($scale, percent, $key));
    }
  }
}

.line-height,
.ln-h {
  &--1 {
    @include line-height(1 !important);
  }

  &--1-1 {
    @include line-height(1.1 !important);
  }

  &--1-2 {
    @include line-height(1.2 !important);
  }

  &--1-3 {
    @include line-height(1.33 !important);
  }

  &--1-5 {
    @include line-height(1.5 !important);
  }

  &--1-8 {
    @include line-height(1.8 !important);
  }

  &--2 {
    @include line-height(2 !important);
  }

  &--2-4 {
    @include line-height(2.4 !important);
  }

  &--2-7 {
    @include line-height(2.7 !important);
  }

  &--3 {
    @include line-height(3 !important);
  }

  &--4 {
    @include line-height(4 !important);
  }

  &--xxs {
    @include line-height(map-deep-get($scale, proportion, xxs) !important);
  }

  &--xs {
    @include line-height(map-deep-get($scale, proportion, xs) !important);
  }

  &--sm {
    @include line-height(map-deep-get($scale, proportion, sm) !important);
  }

  &--ms {
    @include line-height(map-deep-get($scale, proportion, ms) !important);
  }

  &--md {
    @include line-height(map-deep-get($scale, proportion, md) !important);
  }

  &--ml {
    @include line-height(map-deep-get($scale, proportion, ml) !important);
  }

  &--lg {
    @include line-height(map-deep-get($scale, proportion, lg) !important);
  }

  &--xl {
    @include line-height(map-deep-get($scale, proportion, xl) !important);
  }

  &--xxl {
    @include line-height(map-deep-get($scale, proportion, xxs) !important);
  }
}

.top {
  @each $key, $value in map-get($scale, proportion) {
    &--#{$key} {
      @include top(map-deep-get($scale, proportion, $key));
    }
  }

  @each $key, $value in map-get($scale, percent) {
    &--#{$key} {
      @include top(map-deep-get($scale, percent, $key));
    }
  }
}

.transition,
.tsn {
  &--ease-out,
  &--e-o {
    &--xxs {
      @include transition(
        all map-deep-get($transition, duration, xxs) ease-out
      );
    }

    &--xs {
      @include transition(all map-deep-get($transition, duration, xs) ease-out);
    }

    &--sm {
      @include transition(all map-deep-get($transition, duration, sm) ease-out);
    }

    &--ms {
      @include transition(all map-deep-get($transition, duration, ms) ease-out);
    }

    &--md {
      @include transition(all map-deep-get($transition, duration, md) ease-out);
    }

    &--ml {
      @include transition(all map-deep-get($transition, duration, ml) ease-out);
    }

    &--lg {
      @include transition(all map-deep-get($transition, duration, lg) ease-out);
    }

    &--xl {
      @include transition(all map-deep-get($transition, duration, xl) ease-out);
    }

    &--xxl {
      @include transition(
        all map-deep-get($transition, duration, xxl) ease-out
      );
    }
  }

  &--ease-in,
  &--e-i {
    &--xxs {
      @include transition(all map-deep-get($transition, duration, xxs) ease-in);
    }

    &--xs {
      @include transition(all map-deep-get($transition, duration, xs) ease-in);
    }

    &--sm {
      @include transition(all map-deep-get($transition, duration, sm) ease-in);
    }

    &--ms {
      @include transition(all map-deep-get($transition, duration, ms) ease-in);
    }

    &--md {
      @include transition(all map-deep-get($transition, duration, md) ease-in);
    }

    &--ml {
      @include transition(all map-deep-get($transition, duration, ml) ease-in);
    }

    &--lg {
      @include transition(all map-deep-get($transition, duration, lg) ease-in);
    }

    &--xl {
      @include transition(all map-deep-get($transition, duration, xl) ease-in);
    }

    &--xxl {
      @include transition(all map-deep-get($transition, duration, xxl) ease-in);
    }
  }

  &--ease-in-out,
  &--e-i-o {
    &--xxs {
      @include transition(
        all map-deep-get($transition, duration, xxs) ease-in-out
      );
    }

    &--xs {
      @include transition(
        all map-deep-get($transition, duration, xs) ease-in-out
      );
    }

    &--sm {
      @include transition(
        all map-deep-get($transition, duration, sm) ease-in-out
      );
    }

    &--ms {
      @include transition(
        all map-deep-get($transition, duration, ms) ease-in-out
      );
    }

    &--md {
      @include transition(
        all map-deep-get($transition, duration, md) ease-in-out
      );
    }

    &--ml {
      @include transition(
        all map-deep-get($transition, duration, ml) ease-in-out
      );
    }

    &--lg {
      @include transition(
        all map-deep-get($transition, duration, lg) ease-in-out
      );
    }

    &--xl {
      @include transition(
        all map-deep-get($transition, duration, xl) ease-in-out
      );
    }

    &--xxl {
      @include transition(
        all map-deep-get($transition, duration, xxl) ease-in-out
      );
    }
  }
}

.width,
.w {
  @each $key, $value in map-get($scale, proportion) {
    &--#{$key} {
      @include width(map-deep-get($scale, proportion, $key));
    }
  }

  @each $key, $value in map-get($scale, percent) {
    &--#{$key} {
      @include width(map-deep-get($scale, percent, $key));
    }
  }

  @for $i from 2 through 10 {
    @each $key, $value in map-get($scale, proportion) {
      @if $key !=
        10 and
        $key !=
        20 and
        $key !=
        25 and
        $key !=
        33 and
        $key !=
        40 and
        $key !=
        45 and
        $key !=
        50 and
        $key !=
        60 and
        $key !=
        67 and
        $key !=
        75 and
        $key !=
        80 and
        $key !=
        90 and
        $key !=
        100 and
        $key !=
        50vh and
        $key !=
        100vh and
        $key !=
        50vw and
        $key !=
        100vw
      {
        &--#{$i}#{$key} {
          @include width(
            calc(#{$i} * #{map-deep-get($scale, proportion, $key)})
          );
        }
      }
    }
  }
}

.min-width,
.min-w {
  @each $key, $value in map-get($scale, proportion) {
    &--#{$key} {
      @include min-width(map-deep-get($scale, proportion, $key));
    }
  }

  @each $key, $value in map-get($scale, percent) {
    &--#{$key} {
      @include min-width(map-deep-get($scale, percent, $key));
    }
  }

  @for $i from 2 through 10 {
    @each $key, $value in map-get($scale, proportion) {
      @if $key !=
        10 and
        $key !=
        20 and
        $key !=
        25 and
        $key !=
        33 and
        $key !=
        40 and
        $key !=
        45 and
        $key !=
        50 and
        $key !=
        60 and
        $key !=
        67 and
        $key !=
        75 and
        $key !=
        80 and
        $key !=
        90 and
        $key !=
        100 and
        $key !=
        50vh and
        $key !=
        100vh and
        $key !=
        50vw and
        $key !=
        100vw
      {
        &--#{$i}#{$key} {
          @include min-width(
            calc(#{$i} * #{map-deep-get($scale, proportion, $key)})
          );
        }
      }
    }
  }
}

.max-width,
.max-w {
  @each $key, $value in map-get($scale, proportion) {
    &--#{$key} {
      @include max-width(map-deep-get($scale, proportion, $key));
    }
  }

  @each $key, $value in map-get($scale, percent) {
    &--#{$key} {
      @include max-width(map-deep-get($scale, percent, $key));
    }
  }

  @for $i from 2 through 10 {
    @each $key, $value in map-get($scale, proportion) {
      @if $key !=
        10 and
        $key !=
        20 and
        $key !=
        25 and
        $key !=
        33 and
        $key !=
        40 and
        $key !=
        45 and
        $key !=
        50 and
        $key !=
        60 and
        $key !=
        67 and
        $key !=
        75 and
        $key !=
        80 and
        $key !=
        90 and
        $key !=
        100 and
        $key !=
        50vh and
        $key !=
        100vh and
        $key !=
        50vw and
        $key !=
        100vw
      {
        &--#{$i}#{$key} {
          @include max-width(
            calc(#{$i} * #{map-deep-get($scale, proportion, $key)})
          );
        }
      }
    }
  }
}

// TBD

// TBD

// TBD

@mixin align-content($align-content) {
  align-content: $align-content;
}

@mixin align-items($align-items) {
  align-items: $align-items;
}

@mixin align-self($align-self) {
  align-self: $align-self;
}

@mixin all($all) {
  all: $all;
}

@mixin appearance($appearance) {
  appearance: $appearance;
}

@mixin backface-visibility($backface-visibility) {
  backface-visibility: $backface-visibility;
}

@mixin background-image($background-image) {
  background-image: $background-image;
}

@mixin background-position-x($background-position-x) {
  background-position-x: $background-position-x;
}

@mixin background-position-y($background-position-y) {
  background-position-y: $background-position-y;
}

@mixin background-position(
  $background-position,
  $background-position-x: $background-position,
  $background-position-y: $background-position
) {
  @if $background-position {
    background-position: $background-position;
  } @else {
    background-position: $background-position-x $background-position-y;
  }
}

@mixin background-size($background-size) {
  background-size: $background-size;
}

@mixin background-repeat($background-repeat) {
  background-repeat: $background-repeat;
}

@mixin background-origin($background-origin) {
  background-origin: $background-origin;
}

@mixin background-clip($background-clip) {
  background-clip: $background-clip;
}

@mixin background-color($background-color) {
  background-color: $background-color;
}

@mixin background(
  $image: null,
  $position: null,
  $position-y: null,
  $position-x: null,
  $size: null,
  $size-y: null,
  $size-x: null,
  $repeat: null,
  $attachment: null,
  $origin: null,
  $clip: null,
  $color: null
) {
  // Image

  @if $image and
    $color ==
    null and
    $position ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $repeat ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background: $image;
  }

  // Color

  @if $color and
    $image ==
    null and
    $position ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $repeat ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background: $color;
  }

  // Repeat

  @if $repeat and
    $image ==
    null and
    $color ==
    null and
    $position ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background-repeat: $repeat;
  }

  // Attachment

  @if $attachment and
    $image ==
    null and
    $color ==
    null and
    $position ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $repeat ==
    null and
    $clip ==
    null and
    $origin ==
    null
  {
    background-attachment: $attachment;
  }

  // Origin

  @if $origin and
    $image ==
    null and
    $color ==
    null and
    $position ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $repeat ==
    null and
    $clip ==
    null and
    $attachment ==
    null
  {
    background-origin: $origin;
  }

  // Clip

  @if $clip and
    $image ==
    null and
    $color ==
    null and
    $position ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $repeat ==
    null and
    $origin ==
    null and
    $attachment ==
    null
  {
    background-clip: $clip;
  }

  // Positions

  @if $position and
    $image ==
    null and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $repeat ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background-position: $position;
  }

  @if $position-y and
    $image ==
    null and
    $color ==
    null and
    $position-x ==
    null and
    $position ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $repeat ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background-position-y: $position;
  }

  @if $position-x and
    $image ==
    null and
    $color ==
    null and
    $position ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $repeat ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background-position-x: $position;
  }

  @if $position-y and
    $position-x and
    $image ==
    null and
    $color ==
    null and
    $position ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $repeat ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background-position: $position-y $position-x;
  }

  // Sizes

  @if $size and
    $image ==
    null and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $repeat ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background-size: $size;
  }

  @if $size-y and
    $size-x and
    $image ==
    null and
    $color ==
    null and
    $position ==
    null and
    $size ==
    null and
    $repeat ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background-size: $size-y $size-x;
  }

  // Image and Repeat

  @if $image and
    $repeat and
    $color ==
    null and
    $position ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background: $image $repeat;
  }

  // Image, Repeat and Positions

  @if $image and
    $repeat and
    $position and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background: $image $position $repeat;
  }

  @if $image and
    $repeat and
    $position-y and
    $position-x and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background: $image $position-y $position-x $repeat;
  }

  // Image, Repeat, Positions and Sizes

  @if $image and
    $repeat and
    $position and
    $size and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background: $image #{$position} / #{$size} $repeat;
  }

  @if $image and
    $repeat and
    $position and
    $size-y and
    $size-x and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background: $image #{$position} / #{$size-y $size-x} $repeat;
  }

  @if $image and
    $repeat and
    $position-y and
    $position-x and
    $size and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background: $image #{$position-y $position-x} / #{$size} $repeat;
  }

  @if $image and
    $repeat and
    $position-y and
    $position-x and
    $size-y and
    $size-x and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $clip ==
    null and
    $attachment ==
    null and
    $origin ==
    null
  {
    background: $image #{$position-y $position-x} / #{$size-y $size-x} $repeat;
  }

  // Image, Repeat, Positions, Sizes and Attachment

  @if $image and
    $repeat and
    $position and
    $size and
    $attachment and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $clip ==
    null and
    $origin ==
    null
  {
    background: $image #{$position} / #{$size} $repeat $attachment;
  }

  @if $image and
    $repeat and
    $position and
    $size-y and
    $size-x and
    $attachment and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $clip ==
    null and
    $origin ==
    null
  {
    background: $image #{$position} / #{$size-y $size-x} $repeat $attachment;
  }

  @if $image and
    $repeat and
    $position-y and
    $position-x and
    $size and
    $attachment and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $clip ==
    null and
    $origin ==
    null
  {
    background: $image
      #{$position-y
      $position-x} /
      #{$size}
      $repeat
      $attachment;
  }

  @if $image and
    $repeat and
    $position-y and
    $position-x and
    $size-y and
    $size-x and
    $attachment and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $clip ==
    null and
    $origin ==
    null
  {
    background: $image
      #{$position-y
      $position-x} /
      #{$size-y
      $size-x}
      $repeat
      $attachment;
  }

  // Image, Repeat, Positions, Sizes, Attachment and Origin

  @if $image and
    $repeat and
    $position and
    $size and
    $attachment and
    $origin and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $clip ==
    null
  {
    background: $image #{$position} / #{$size} $repeat $attachment $origin;
  }

  @if $image and
    $repeat and
    $position and
    $size-y and
    $size-x and
    $attachment and
    $origin and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $clip ==
    null
  {
    background: $image
      #{$position} /
      #{$size-y
      $size-x}
      $repeat
      $attachment
      $origin;
  }

  @if $image and
    $repeat and
    $position-y and
    $position-x and
    $size and
    $attachment and
    $origin and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $clip ==
    null
  {
    background: $image
      #{$position-y
      $position-x} /
      #{$size}
      $repeat
      $attachment
      $origin;
  }

  @if $image and
    $repeat and
    $position-y and
    $position-x and
    $size-y and
    $size-x and
    $attachment and
    $origin and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $clip ==
    null
  {
    background: $image
      #{$position-y
      $position-x} /
      #{$size-y
      $size-x}
      $repeat
      $attachment
      $origin;
  }

  // Image, Repeat, Positions, Sizes, Attachment and Clip

  @if $image and
    $repeat and
    $position and
    $size and
    $attachment and
    $clip and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $origin ==
    null
  {
    background: $image #{$position} / #{$size} $repeat $attachment $clip;
  }

  @if $image and
    $repeat and
    $position and
    $size-y and
    $size-x and
    $attachment and
    $clip and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $origin ==
    null
  {
    background: $image
      #{$position} /
      #{$size-y
      $size-x}
      $repeat
      $attachment
      $clip;
  }

  @if $image and
    $repeat and
    $position-y and
    $position-x and
    $size and
    $attachment and
    $clip and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size-y ==
    null and
    $size-x ==
    null and
    $origin ==
    null
  {
    background: $image
      #{$position-y
      $position-x} /
      #{$size}
      $repeat
      $attachment
      $clip;
  }

  @if $image and
    $repeat and
    $position-y and
    $position-x and
    $size-y and
    $size-x and
    $attachment and
    $clip and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $origin ==
    null
  {
    background: $image
      #{$position-y
      $position-x} /
      #{$size-y
      $size-x}
      $repeat
      $attachment
      $clip;
  }

  // Image, Repeat, Positions, Sizes, Attachment, Origin and Clip

  @if $image and
    $repeat and
    $position and
    $size and
    $attachment and
    $origin and
    $clip and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size-y ==
    null and
    $size-x ==
    null
  {
    background: $image
      #{$position} /
      #{$size}
      $repeat
      $attachment
      $origin
      $clip;
  }

  @if $image and
    $repeat and
    $position and
    $size-y and
    $size-x and
    $attachment and
    $origin and
    $clip and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null
  {
    background: $image
      #{$position} /
      #{$size-y
      $size-x}
      $repeat
      $attachment
      $origin
      $clip;
  }

  @if $image and
    $repeat and
    $position-y and
    $position-x and
    $size and
    $attachment and
    $origin and
    $clip and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size-y ==
    null and
    $size-x ==
    null
  {
    background: $image
      #{$position-y
      $position-x} /
      #{$size}
      $repeat
      $attachment
      $origin
      $clip;
  }

  @if $image and
    $repeat and
    $position-y and
    $position-x and
    $size-y and
    $size-x and
    $attachment and
    $origin and
    $clip and
    $color ==
    null and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null
  {
    background: $image
      #{$position-y
      $position-x} /
      #{$size-y
      $size-x}
      $repeat
      $attachment
      $origin
      $clip;
  }

  // Complete Property

  @if $image and
    $color and
    $position and
    $position-x ==
    null and
    $position-y ==
    null and
    $size and
    $size-y ==
    null and
    $size-x ==
    null and
    $repeat and
    $clip and
    $attachment and
    $origin
  {
    background: $image
      #{$position} /
      #{$size}
      $repeat
      $attachment
      $origin
      $clip
      $color;
  }

  @if $image and
    $color and
    $position ==
    null and
    $position-x and
    $position-y and
    $size and
    $size-y ==
    null and
    $size-x ==
    null and
    $repeat and
    $clip and
    $attachment and
    $origin
  {
    background: $image
      #{$position-y
      $position-x} /
      #{$size}
      $repeat
      $attachment
      $origin
      $clip
      $color;
  }

  @if $image and
    $color and
    $position and
    $position-x ==
    null and
    $position-y ==
    null and
    $size ==
    null and
    $size-y and
    $size-x and
    $repeat and
    $clip and
    $attachment and
    $origin
  {
    background: $image
      #{$position} /
      #{$size-y
      $size-x}
      $repeat
      $attachment
      $origin
      $clip
      $color;
  }

  @if $image and
    $color and
    $position ==
    null and
    $position-x and
    $position-y and
    $size ==
    null and
    $size-y and
    $size-x and
    $repeat and
    $clip and
    $attachment and
    $origin
  {
    background: $image
      #{$position-y
      $position-x} /
      #{$size-y
      $size-x}
      $repeat
      $attachment
      $origin
      $clip
      $color;
  }
}

@mixin all($bleed) {
  bleed: $bleed;
}

@mixin block-overflow($block-overflow) {
  block-overflow: $block-overflow;
}

@mixin border-width($border-width) {
  border-width: $border-width;
}

@mixin border-style($border-style) {
  border-style: $border-style;
}

@mixin border-radius($border-radius) {
  border-radius: $border-radius;
}

@mixin border-top($width: null, $style: null, $color: null, $radius: null) {
  border-top: $width;
  border-style: $style;
  border-color: $color;
  border-radius: $radius;
}

@mixin border-right($width: null, $style: null, $color: null, $radius: null) {
  border-right: $width;
  border-style: $style;
  border-color: $color;
  border-radius: $radius;
}

@mixin border-bottom($width: null, $style: null, $color: null, $radius: null) {
  border-bottom: $width;
  border-style: $style;
  border-color: $color;
  border-radius: $radius;
}

@mixin border-left($width: null, $style: null, $color: null, $radius: null) {
  border-left: $width;
  border-style: $style;
  border-color: $color;
  border-radius: $radius;
}

@mixin border(
  $top: null,
  $right: null,
  $bottom: null,
  $left: null,
  $x: null,
  $y: null,
  $width: null,
  $style: null,
  $color: null,
  $radius: null
) {
  // Single Property

  @if $width and $style == null and $color == null {
    border-width: $width;
  }

  @if $style and $width == null and $color == null {
    border-style: $style;
  }

  @if $color and $width == null and $style == null {
    border-color: $color;
  }

  @if $radius {
    border-radius: $radius;
  }

  @if $top and $style == null and $color == null {
    border-top: $top;
  }

  @if $right and $style == null and $color == null {
    border-right: $right;
  }

  @if $bottom and $style == null and $color == null {
    border-bottom: $bottom;
  }
  @if $left and $style == null and $color == null {
    border-left: $left;
  }

  @if $x and $style == null and $color == null {
    border-left: $x;
    border-right: $x;
  }

  @if $y and $style == null and $color == null {
    border-top: $y;
    border-bottom: $y;
  }

  // Two properties

  @if $width and $style and $color == null {
    border: $width $style;
  }

  @if $top and $style and $color == null {
    border-top: $top $style;
  }

  @if $right and $style and $color == null {
    border-right: $right $style;
  }

  @if $bottom and $style and $color == null {
    border-bottom: $bottom $style;
  }

  @if $left and $style and $color == null {
    border-left: $left $style;
  }

  @if $x and $style and $color == null {
    border-left: $x $style;
    border-right: $x $style;
  }

  @if $y and $style and $color == null {
    border-top: $y $style;
    border-bottom: $y $style;
  }

  // Three Properties

  @if $width and $style and $color {
    border: $width $style $color;
  }

  @if $top and $style and $color {
    border-top: $top $style $color;
  }

  @if $right and $style and $color {
    border-right: $right $style $color;
  }

  @if $bottom and $style and $color {
    border-bottom: $bottom $style $color;
  }

  @if $left and $style and $color {
    border-left: $left $style $color;
  }
}

@mixin bottom($bottom) {
  bottom: $bottom;
}

@mixin caret-color($caret-color) {
  caret-color: $caret-color;
}

@mixin clear($clear) {
  clear: $clear;
}

@mixin clip-path($clip-path) {
  clip-path: $clip-path;
}

@mixin color($color) {
  color: $color;
}

@mixin column-count($column-count) {
  column-count: $column-count;
}

@mixin column-fill($column-fill) {
  column-fill: $column-fill;
}

@mixin column-gap($column-gap) {
  column-gap: $column-gap;
}

@mixin column-rule($column-rule) {
  column-rule: $column-rule;
}

@mixin column-span($column-span) {
  column-span: $column-span;
}

@mixin column-width($column-width) {
  column-width: $column-width;
}

@mixin columns($columns-width, $columns-count) {
  columns: $columns-width $columns-count;
}

@mixin content($content) {
  content: $content;
}

@mixin counter-increment($counter-increment) {
  counter-increment: $counter-increment;
}

@mixin counter-reset($user-ident, $integer) {
  counter-reset: $user-ident, $integer;
}

@mixin cursor($cursor) {
  cursor: $cursor;
}

@mixin display($display) {
  display: $display;
}

@mixin fill($fill) {
  fill: $fill;
}

@mixin filter($function, $value...) {
  filter: #{$function }($value);
}

@mixin flex-grow($flex-grow) {
  flex-grow: $flex-grow;
}

@mixin flex-shrink($flex-shrink) {
  flex-shrink: $flex-shrink;
}

@mixin flex-basis($flex-basis) {
  flex-basis: $flex-basis;
}

@mixin flex-direction($flex-direction) {
  flex-direction: $flex-direction;
}

@mixin flex-wrap($flex-wrap) {
  flex-wrap: $flex-wrap;
}

@mixin flex(
  $grow: null,
  $shrink: null,
  $basis: null,
  $direction: null,
  $wrap: null,
  $justify-content: null,
  $align-items: null,
  $position: null
) {
  @include display(flex);
  @if $grow & $shrink & $basis {
    flex: $grow $shrink $basis;
  }
  @if $grow {
    flex-grow: $grow;
  }
  @if $shrink {
    flex-shrink: $shrink;
  }
  @if $basis {
    flex-basis: $basis;
  }
  @if $direction {
    flex-direction: $direction;
  }
  @if $wrap {
    flex-wrap: $wrap;
  }
  @if $justify-content {
    justify-content: $justify-content;
  }
  @if $align-items {
    align-items: $align-items;
  }
  @if $position {
    justify-content: $position;
    align-items: $position;
  }
}

@mixin float($float) {
  float: $float;
}

@mixin font-weight($font-weight) {
  font-weight: $font-weight;
}

@mixin font-variant($font-variant) {
  font-variant: $font-variant;
}

@mixin font-stretch($font-stretch) {
  font-stretch: $font-stretch;
}

@mixin font-size($font-size) {
  font-size: $font-size;
}

@mixin line-height($line-height) {
  line-height: $line-height;
}

@mixin font-family($font-family) {
  font-family: $font-family;
}

@mixin font(
  $style: null,
  $weight: null,
  $variant: null,
  $stretch: null,
  $size: null,
  $line-height: null,
  $family: null,
  $letter-spacing: null,
  $color: null,
  $important: null
) {
  @if $size and $line-height and $weight and $family {
    @if $important {
      font: $style $variant $weight #{$size}/#{$line-height} $family !important;
    } @else {
      font: $style $variant $weight #{$size}/#{$line-height} $family;
    }
  }

  @if $size and $weight == null and $line-height == null {
    @if $important {
      font-size: $size !important;
    } @else {
      font-size: $size;
    }
  }

  @if $weight and $size == null and $line-height == null {
    @if $important {
      font-weight: $weight !important;
    } @else {
      font-weight: $weight;
    }
  }

  @if $size and $weight and $line-height == null {
    @if $important {
      font: 400 #{$size}/ 1 sans-serif !important;
    } @else {
      font: 400 #{$size}/ 1 sans-serif;
    }
  }

  @if $line-height and $size == null and $weight == null {
    @if $important {
      line-height: $line-height !important;
    } @else {
      line-height: $line-height;
    }
  }

  @if $size and $line-height and $weight == null {
    @if $important {
      font: 400 #{$size}/#{$line-height} sans-serif !important;
    } @else {
      font: 400 #{$size}/#{$line-height} sans-serif;
    }
  }

  @if $size and $weight and $family and $line-height == null {
    @if $important {
      font: $weight #{$size}/ 1 $family !important;
    } @else {
      font: $weight #{$size}/ 1 $family;
    }
  }

  @if $size and $weight and $line-height and $family == null {
    @if $important {
      font: $weight #{$size}/#{$line-height} sans-serif !important;
    } @else {
      font: $weight #{$size}/#{$line-height};
    }
  }

  @if $size and $weight and $line-height and $family {
    @if $important {
      font: $weight #{$size}/#{$line-height} $family !important;
    } @else {
      font: $weight #{$size}/#{$line-height} $family;
    }
  }

  @if $size and $weight and $line-height {
    @if $important {
      font: $weight #{$size}/#{$line-height} sans-serif !important;
    } @else {
      font: $weight #{$size}/#{$line-height} sans-serif;
    }
  }

  @if $letter-spacing {
    @if $important {
      letter-spacing: $letter-spacing !important;
    } @else {
      letter-spacing: $letter-spacing;
    }
  }

  @if $color {
    @if $important {
      color: $color !important;
    } @else {
      color: $color;
    }
  }
}

/*** Parent ***/

@mixin grid-template-columns($grid-template-columns) {
  grid-template-columns: $grid-template-columns;
}

@mixin grid-template-rows($grid-template-rows) {
  grid-template-rows: $grid-template-rows;
}

@mixin grid-template-areas($grid-template-areas) {
  grid-template-areas: $grid-template-areas;
}

// @mixin grid-template($grid-template-areas, $grid-template-columns, $grid-template-rows) {

// }

/*** Children ***/

@mixin grid-column-start($grid-column-start) {
  grid-column-start: $grid-column-start;
}

@mixin grid-column-end($grid-column-end) {
  grid-column-end: $grid-column-end;
}

@mixin grid-column($grid-column) {
  grid-column: $grid-column;
}

@mixin grid-row($grid-row) {
  grid-row: $grid-row;
}

@mixin grid-row-start($grid-row-start) {
  grid-row-start: $grid-row-start;
}

@mixin grid-row-end($grid-row-end) {
  grid-row-end: $grid-row-end;
}

@mixin grid-area($grid-area) {
  grid-area: $grid-area;
}

@mixin grid-column-gap($grid-column-gap) {
  grid-column-gap: $grid-column-gap;
}

@mixin grid-row-gap($grid-row-gap) {
  grid-row-gap: $grid-row-gap;
}

@mixin grid-gap($grid-gap) {
  grid-gap: $grid-gap;
}

@mixin grid(
  $template-columns: null,
  $template-rows: null,
  $template-areas: null,
  $template: null,
  $column-start: null,
  $column-end: null,
  $column: null,
  $row-start: null,
  $row-end: null,
  $row: null,
  $area: null,
  $column-gap: null,
  $row-gap: null,
  $gap: null,
  $justify-items: null,
  $justify-content: null,
  $align-items: null,
  $align-content: null,
  $place-items: null,
  $place-content: null
) {
  display: grid;
  grid-template-columns: $template-columns;
  grid-template-rows: $template-rows;
  grid-template-areas: $template-areas;
  grid-template: $template;
  grid-column-start: $column-start;
  grid-column-end: $column-end;
  grid-column: $column;
  grid-row-start: $row-start;
  grid-row-end: $row-end;
  grid-row: $row;
  grid-column-gap: $column-gap;
  grid-row-gap: $row-gap;
  grid-gap: $gap;
  justify-content: $justify-content;
  justify-items: $justify-items;
  align-content: $align-content;
  align-items: $align-items;
  place-content: $place-content;
  place-items: $place-items;
}

@mixin hanging-punctuation($hanging-punctuation) {
  hanging-punctuation: $hanging-punctuation;
}

@mixin height($height: null, $min: null, $max: null) {
  height: $height;
  min-height: $min;
  max-height: $max;
}

@mixin min-height($height) {
  min-height: $height;
}

@mixin max-height($height) {
  max-height: $height;
}

@mixin hyphens($hyphens) {
  hyphens: $hyphens;
}

@mixin image-rendering($image-rendering) {
  image-rendering: $image-rendering;
}

// @import 'offset';  - not supported in Firefox and Safari

// @import 'zoom' — not supported in Firefox

@mixin initial-letter($initial-letter) {
  initial-letter: $initial-letter;
}

@mixin isolation($isolation) {
  isolation: $isolation;
}

@mixin justify-content($justify-content) {
  justify-content: $justify-content;
}

@mixin justify-items($justify-items) {
  justify-items: $justify-items;
}

@mixin justify-self($justify-self) {
  justify-self: $justify-self;
}

@mixin left($left) {
  left: $left;
}

@mixin letter-spacing($letter-spacing) {
  letter-spacing: $letter-spacing;
}

@mixin line-clamp($line-clamp) {
  line-clamp: $line-clamp;
}

@mixin line-height($line-height) {
  line-height: $line-height;
}

@mixin list-style($list-style) {
  list-style: $list-style;
}

@mixin list-style-positon($list-style-position) {
  list-style-position: $list-style-position;
}

@mixin list-style-type($list-style-type) {
  list-style-type: $list-style-type;
}

@mixin list(
  $style: null,
  $style-position: null,
  $style-type: null,
  $style-image: null
) {
  list-style: $style;
  list-style-position: $style-position;
  list-style-type: $style-type;
  list-style-image: $style-image;
}

@mixin margin-top($margin-top) {
  margin-top: $margin-top;
}

@mixin margin-right($margin-right) {
  margin-right: $margin-right;
}

@mixin margin-bottom($margin-bottom) {
  margin-bottom: $margin-bottom;
}

@mixin margin-left($margin-left) {
  margin-left: $margin-left;
}

@mixin margin-x($margin-x) {
  margin-left: $margin-x;
  margin-right: $margin-x;
}

@mixin margin-y($margin-y) {
  margin-top: $margin-y;
  margin-bottom: $margin-y;
}

@mixin margin(
  $margin: null,
  $top: null,
  $right: null,
  $bottom: null,
  $left: null,
  $x: null,
  $y: null,
  $important: null
) {
  // Single Property

  @if $top and
    $right ==
    null and
    $bottom ==
    null and
    $left ==
    null and
    $x ==
    null and
    $y ==
    null
  {
    @if $important {
      margin-top: $top !important;
    } @else {
      margin-top: $top;
    }
  }

  @if $right and
    $bottom ==
    null and
    $left ==
    null and
    $top ==
    null and
    $x ==
    null and
    $y ==
    null
  {
    @if $important {
      margin-right: $right !important;
    } @else {
      margin-right: $right;
    }
  }

  @if $bottom and
    $left ==
    null and
    $top ==
    null and
    $right ==
    null and
    $x ==
    null and
    $y ==
    null
  {
    @if $important {
      margin-bottom: $bottom !important;
    } @else {
      margin-bottom: $bottom;
    }
  }

  @if $left and
    $top ==
    null and
    $right ==
    null and
    $bottom ==
    null and
    $x ==
    null and
    $y ==
    null
  {
    @if $important {
      margin-left: $left !important;
    } @else {
      margin-left: $left;
    }
  }

  // Two Properties

  @if $top and $right and $bottom == null and $left == null {
    @if $important {
      margin: $top $right 0 0 !important;
    } @else {
      margin: $top $right 0 0;
    }
  }

  @if $top and $bottom and $right == null and $left == null {
    @if $important {
      margin: $top 0 $bottom 0 !important;
    } @else {
      margin: $top 0 $bottom 0;
    }
  }

  @if $top and $left and $right == null and $left == null {
    @if $important {
      margin: $top 0 0 $left !important;
    } @else {
      margin: $top 0 0 $left;
    }
  }

  @if $left and $right and $top == null and $bottom == null {
    @if $important {
      margin: 0 $right 0 $left !important;
    } @else {
      margin: 0 $right 0 $left;
    }
  }

  @if $left and $bottom and $top == null and $right == null {
    @if $important {
      margin: 0 0 $bottom $left !important;
    } @else {
      margin: 0 0 $bottom $left;
    }
  }

  @if $right and $bottom and $top == null and $right == null {
    @if $important {
      margin: 0 $right $bottom 0 !important;
    } @else {
      margin: 0 $right $bottom 0;
    }
  }

  // Three Properties

  @if $top and $bottom and $right and $left == null {
    @if $important {
      margin: 0 $right $bottom $left !important;
    } @else {
      margin: 0 $right $bottom $left;
    }
  }

  @if $top and $bottom and $left and $right == null {
    @if $important {
      margin: $top 0 $bottom $left !important;
    } @else {
      margin: $top 0 $bottom $left;
    }
  }

  @if $top and $left and $right and $bottom == null {
    @if $important {
      margin: $top $right 0 $left !important;
    } @else {
      margin: $top $right 0 $left;
    }
  }

  @if $bottom and $left and $right and $top == null {
    @if $important {
      margin: 0 $right $bottom $left !important;
    } @else {
      margin: 0 $right $bottom $left;
    }
  }

  // Four Properties

  @if $top and $right and $bottom and $left and $x == null and $y == null {
    @if $important {
      margin: $top $right $bottom $left !important;
    } @else {
      margin: $top $right $bottom $left;
    }
  }

  // Axis Properties

  @if $x and $y == null and $top == null and $bottom == null {
    @if $important {
      margin: 0 $x 0 $x !important;
    } @else {
      margin: 0 $x 0 $x;
    }
  }

  @if $y and $x == null and $right == null and $left == null {
    @if $important {
      margin: $y 0 $y 0 !important;
    } @else {
      margin: $y 0 $y 0;
    }
  }

  @if $x and $y {
    @if $important {
      margin: $y $x $y x !important;
    } @else {
      margin: $y $x $y $x;
    }
  }

  @if $x and $top and $bottom == null {
    @if $important {
      margin: $top $x 0 $x !important;
    } @else {
      margin: $top $x 0 $x;
    }
  }

  @if $x and $bottom and $top == null {
    @if $important {
      margin: 0 $x $bottom $x !important;
    } @else {
      margin: 0 $x $bottom $x;
    }
  }

  @if $y and $right and $left == null {
    @if $important {
      margin: $y $right $y 0 !important;
    } @else {
      margin: $y $right $y 0;
    }
  }

  @if $y and $left and $right == null {
    @if $important {
      margin: $y 0 $y $left !important;
    } @else {
      margin: $y 0 $y $left;
    }
  }
}

@mixin mix-blend-mode($mix-blend-mode) {
  mix-blend-mode: $mix-blend-mode;
}

@mixin object-fit($object-fit) {
  object-fit: $object-fit;
}

@mixin object-position($object-position-x, $object-position-y) {
  object-position: $object-position-x, $object-position-y;
}

@mixin object($fit: null, $position-x: null, $position-y: null) {
  object-fit: $fit;
  object-position: $position-x, $position-y;
}

@mixin opacity($opacity) {
  opacity: $opacity;
}

@mixin order($order) {
  order: $order;
}

@mixin orphans($orphans) {
  orphans: $orphans;
}

@mixin outline-width($outline-width) {
  outline-width: $outline-width;
}

@mixin outline-style($outline-style) {
  outline-style: $outline-style;
}

@mixin outline-color($outline-color) {
  outline-color: $outline-color;
}

@mixin outline-offset($outline-offset) {
  outline-offset: $outline-offset;
}

@mixin outline(
  $outline-width: null,
  $outline-style: null,
  $outline-color: null,
  $outline-offset: null
) {
  outline: $outline-width, $outline-style, $outline-color;
  outline-offset: $outline-offset;
}

@mixin overflow-x($overflow-x) {
  overflow-x: $overflow-x;
  overscroll-behavior: contain;
}

@mixin overflow-y($overflow-y) {
  overflow-y: $overflow-y;
  overscroll-behavior: contain;
}

@mixin overflow($x: null, $y: null) {
  overflow-x: $x;
  overflow-y: $y;
  overscroll-behavior: contain;
  -webkit-overflow-scrolling: touch;
}

@mixin padding-top($padding-top) {
  padding-top: $padding-top;
}

@mixin padding-right($padding-right) {
  padding-right: $padding-right;
}

@mixin padding-bottom($padding-bottom) {
  padding-bottom: $padding-bottom;
}

@mixin padding-left($padding-left) {
  padding-left: $padding-left;
}

@mixin padding-x($padding-x) {
  padding-left: $padding-x;
  padding-right: $padding-x;
}

@mixin padding-y($padding-y) {
  padding-top: $padding-y;
  padding-bottom: $padding-y;
}

@mixin padding(
  $padding: null,
  $top: null,
  $right: null,
  $bottom: null,
  $left: null,
  $x: null,
  $y: null,
  $important: null
) {
  // Single Property

  @if $top and
    $right ==
    null and
    $bottom ==
    null and
    $left ==
    null and
    $x ==
    null and
    $y ==
    null
  {
    @if $important {
      padding-top: $top !important;
    } @else {
      padding-top: $top;
    }
  }

  @if $right and
    $bottom ==
    null and
    $left ==
    null and
    $top ==
    null and
    $x ==
    null and
    $y ==
    null
  {
    @if $important {
      padding-right: $right !important;
    } @else {
      padding-right: $right;
    }
  }

  @if $bottom and
    $left ==
    null and
    $top ==
    null and
    $right ==
    null and
    $x ==
    null and
    $y ==
    null
  {
    @if $important {
      padding-bottom: $bottom !important;
    } @else {
      padding-bottom: $bottom;
    }
  }

  @if $left and
    $top ==
    null and
    $right ==
    null and
    $bottom ==
    null and
    $x ==
    null and
    $y ==
    null
  {
    @if $important {
      padding-left: $left !important;
    } @else {
      padding-left: $left;
    }
  }

  // Two Properties

  @if $top and $right and $bottom == null and $left == null {
    @if $important {
      padding: $top $right 0 0 !important;
    } @else {
      padding: $top $right 0 0;
    }
  }

  @if $top and $bottom and $right == null and $left == null {
    @if $important {
      padding: $top 0 $bottom 0 !important;
    } @else {
      padding: $top 0 $bottom 0;
    }
  }

  @if $top and $left and $right == null and $left == null {
    @if $important {
      padding: $top 0 0 $left !important;
    } @else {
      padding: $top 0 0 $left;
    }
  }

  @if $left and $right and $top == null and $bottom == null {
    @if $important {
      padding: 0 $right 0 $left !important;
    } @else {
      padding: 0 $right 0 $left;
    }
  }

  @if $left and $bottom and $top == null and $right == null {
    @if $important {
      padding: 0 0 $bottom $left !important;
    } @else {
      padding: 0 0 $bottom $left;
    }
  }

  @if $right and $bottom and $top == null and $right == null {
    @if $important {
      padding: 0 $right $bottom 0 !important;
    } @else {
      padding: 0 $right $bottom 0;
    }
  }

  // Three Properties

  @if $top and $bottom and $right and $left == null {
    @if $important {
      padding: 0 $right $bottom $left !important;
    } @else {
      padding: 0 $right $bottom $left;
    }
  }

  @if $top and $bottom and $left and $right == null {
    @if $important {
      padding: $top 0 $bottom $left !important;
    } @else {
      padding: $top 0 $bottom $left;
    }
  }

  @if $top and $left and $right and $bottom == null {
    @if $important {
      padding: $top $right 0 $left !important;
    } @else {
      padding: $top $right 0 $left;
    }
  }

  @if $bottom and $left and $right and $top == null {
    @if $important {
      padding: 0 $right $bottom $left !important;
    } @else {
      padding: 0 $right $bottom $left;
    }
  }

  // Four Properties

  @if $top and $right and $bottom and $left and $x == null and $y == null {
    @if $important {
      padding: $top $right $bottom $left !important;
    } @else {
      padding: $top $right $bottom $left;
    }
  }

  // Axis Properties

  @if $x and $y == null and $top == null and $bottom == null {
    @if $important {
      padding: 0 $x 0 $x !important;
    } @else {
      padding: 0 $x 0 $x;
    }
  }

  @if $y and $x == null and $right == null and $left == null {
    @if $important {
      padding: $y 0 $y 0 !important;
    } @else {
      padding: $y 0 $y 0;
    }
  }

  @if $x and $y {
    @if $important {
      padding: $y $x $y x !important;
    } @else {
      padding: $y $x $y $x;
    }
  }

  @if $x and $top and $bottom == null {
    @if $important {
      padding: $top $x 0 $x !important;
    } @else {
      padding: $top $x 0 $x;
    }
  }

  @if $x and $bottom and $top == null {
    @if $important {
      padding: 0 $x $bottom $x !important;
    } @else {
      padding: 0 $x $bottom $x;
    }
  }

  @if $y and $right and $left == null {
    @if $important {
      padding: $y $right $y 0 !important;
    } @else {
      padding: $y $right $y 0;
    }
  }

  @if $y and $left and $right == null {
    @if $important {
      padding: $y 0 $y $left !important;
    } @else {
      padding: $y 0 $y $left;
    }
  }
}

@mixin perspective(
  $perspective,
  $perspective-origin-x,
  $perspective-origin-y,
  $perspective-transform: null
) {
  perspective: $perspective;
  perspective-origin: $perspective-origin-x $perspective-origin-y;
  > div {
    transform: $perspective-transform;
  }
}
@mixin place-content($place-content) {
  place-content: $place-content;
}

@mixin place-items($place-items) {
  place-items: $place-items;
}

@mixin place-self($place-self) {
  place-self: $place-self;
}

@mixin pointer-events($pointer-events) {
  pointer-events: $pointer-events;
}

@mixin position(
  $position: null,
  $top: null,
  $right: null,
  $bottom: null,
  $left: null,
  $transform: null,
  $z-index: null
) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  transform: $transform;
  z-index: $z-index;
}

@mixin resize($resize) {
  resize: $resize;
}

@mixin right($right) {
  right: $right;
}

@mixin scroll-behavior($scroll-behavior) {
  scroll-behavior: $scroll-behavior;
}

@mixin scroll-margin-top($scroll-margin-top) {
  scroll-margin-top: $scroll-margin-top;
}

@mixin scroll-margin-right($scroll-margin-right) {
  scroll-margin-right: $scroll-margin-right;
}

@mixin scroll-margin-bottom($scroll-margin-bottom) {
  scroll-margin-bottom: $scroll-margin-bottom;
}

@mixin scroll-margin-left($scroll-margin-left) {
  scroll-margin-left: $scroll-margin-left;
}

@mixin scroll-margin(
  $margin-top: null,
  $margin-right: null,
  $margin-bottom: null,
  $margin-left: null
) {
  scroll-margin: $scroll-margin-top $scroll-margin-right $scroll-margin-bottom
    $scroll-margin-left;
}

@mixin scroll-padding-top($scroll-padding-top) {
  scroll-padding-top: $scroll-padding-top;
}

@mixin scroll-padding-right($scroll-padding-right) {
  scroll-padding-right: $scroll-padding-right;
}

@mixin scroll-padding-bottom($scroll-padding-bottom) {
  scroll-padding-bottom: $scroll-padding-bottom;
}

@mixin scroll-padding-left($scroll-padding-left) {
  scroll-padding-left: $scroll-padding-left;
}

@mixin scroll-padding(
  $padding-top: null,
  $padding-right: null,
  $padding-bottom: null,
  $padding-left: null
) {
  scroll-padding: $scroll-padding-top $scroll-padding-right
    $scroll-padding-bottom $scroll-padding-top;
}

@mixin scroll-snap-align($scroll-snap-align) {
  scroll-snap-align: $scroll-snap-align;
}

@mixin scroll-snap-stop($scroll-snap-stop) {
  scroll-snap-stop: $scroll-snap-stop;
}

@mixin scroll-snap-type($scroll-snap-type) {
  scroll-snap-type: $scroll-snap-type;
}

@mixin scroll-snap($align: null, $stop: null, $type: null) {
  scroll-snap-align: $lign;
  scroll-snap-stop: $stop;
  scroll-snap-type: $type;
}

@mixin scroll(
  $margin-top: null,
  $margin-right: null,
  $margin-bottom: null,
  $margin-left: null,
  $padding-top: null,
  $padding-right: null,
  $padding-bottom: null,
  $padding-left: null,
  $align: null,
  $stop: null,
  $type: null
) {
}
@mixin stroke($color, $width, $dasharray, $dashoffset, $linecap) {
  stroke: $color;
  stroke-width: $width;
  stroke-dasharray: $dasharray;
  stroke-dashoffset: $dashoffset;
  stroke-linecap: $linecap;
  stroke-linejoin: $linejoin;
}

@mixin text-align($text-align) {
  text-align: $text-align;
}

@mixin text-align-last($text-align-last) {
  text-align-last: $text-align-last;
}

@mixin text-decoration($line: null, $type: null, $color: null, $style: null) {
  text-decoration: $line $type $color;
  text-decoration-style: $style;
}

@mixin text-indent($text-indent) {
  text-indent: $text-indent;
}

@mixin text-overflow($text-overflow) {
  text-overflow: $text-overflow;
}

@mixin text-rendering($text-rendering) {
  text-rendering: $text-rendering;
}

@mixin text-shadow($offset-x: 0, $offset-y: 0, $blur: null, $color: null) {
  text-shadow: $offset-x $offset-y $blur $color;
}

@mixin text-stroke($stroke-width, $stroke-color) {
  text-stroke: $stroke-width $stroke-color;
}

@mixin text-transform($text-transform) {
  text-transform: $text-transform;
}

@mixin text(
  $align: null,
  $align-last: null,
  $decoration: null,
  $decoration-line: null,
  $decoration-type: null,
  $decoration-color: null,
  $decoration-style: null,
  $indent: null,
  $overflow: null,
  $rendering: null,
  $shadow-offset-x: null,
  $shadow-offset-y: null,
  $shadow-blur: null,
  $shadow-color: null,
  $stroke: null,
  $transform: null
) {
  text-align: $align;
  text-align-last: $align-last;
  text-decoration: $decoration;
  text-indent: $indent;
  text-overflow: $overflow;
  text-rendering: $rendering;
  text-shadow: $shadow-offset-x $shadow-offset-y $shadow-blur $shadow-color;
  text-transform: $transform;
}

@mixin top($top) {
  top: $top;
}

@mixin transform-origin($origin-x: center, $origin-y: center) {
  transform-origin: $origin-x $origin-y;
}

@mixin transform-scaleX($scale-x, $origin-x: null, $origin-y: null) {
  @include transform-origin($origin-x, $origin-y);
  transform: scaleX($scale-x);
}

@mixin transform-scaleY($scale-y, $origin-x: null, $origin-y: null) {
  @include transform-origin($origin-x, $origin-y);
  transform: scaleY($scale-y);
}

@mixin transform-scale(
  $value-x: null,
  $value-y: null,
  $origin-x: null,
  $origin-y: null
) {
  @include transform-origin($origin-x, $origin-y);
  transform: scale($value-x, $value-y);
}

@mixin transform-scale3d(
  $value-x: null,
  $value-y: null,
  $value-z: null,
  $origin-x: null,
  $origin-y: null,
  $origin-z: null
) {
  @include transform-origin($origin-x, $origin-y);
  transform: scale3d($value-x, $value-y, $value-z);
}

@mixin transform-skewX($skew-x, $origin-x: null, $origin-y: null) {
  @include transform-origin($origin-x, $origin-y);
  transform: skewX();
}

@mixin transform-skewY($skew-y: null, $origin-x: null, $origin-y: null) {
  @include transform-origin($origin-x, $origin-y);
  transform: skewY($skew-y);
}

@mixin transform-skew(
  $value-x: null,
  $value-y: null,
  $origin-x: null,
  $origin-y: null
) {
  @include transform-origin($origin-x, $origin-y);
  transform: skewX($value-x);
  transform: skewY($value-y);
}

@mixin transform-translateX($translate-x, $origin-x: null, $origin-y: null) {
  @include transform-origin($origin-x, $origin-y);
  transform: translateX($translate-x);
}

@mixin transform-translateY($translate-y, $origin-x: null, $origin-y: null) {
  @include transform-origin($origin-x, $origin-y);
  transform: translateY($translate-y);
}

@mixin transform-translate(
  $value-x: null,
  $value-y: null,
  $origin-x: null,
  $origin-y: null
) {
  @include transform-origin($origin-x, $origin-y);
  transform: translate($value-x, $value-y);
}

@mixin transform-translate3d(
  $value-x: null,
  $value-y: null,
  $value-z: null,
  $origin-x: null,
  $origin-y: null,
  $origin-z: null
) {
  @include transform-origin($origin-x, $origin-y);
  transform: translate3d($value-x, $value-y, $value-z);
}

@mixin transform-rotate(
  $translate-rotate: null,
  $origin-x: null,
  $origin-y: null
) {
  @include transform-origin($origin-x, $origin-y);
  transform: rotate($translate-rotate);
}

@mixin transform-rotate3d(
  $value-x: null,
  $value-y: null,
  $origin-x: null,
  $origin-y: null
) {
  @include transform-origin($origin-x, $origin-y);
  transform: rotate3d();
}

@mixin transform-perspective(
  $transform-perspective: null,
  $origin-x: null,
  $origin-y: null
) {
  @include transform-origin($origin-x, $origin-y);
  transform: perspective($transform-perspective);
}

@mixin transition-property($transition-property) {
  transition-property: $transition-property;
}

@mixin transition-duration($transition-duration) {
  transition-duration: $transition-duration;
}

@mixin transition-timing-function($transition-timing-function) {
  transition-timing-function: $transition-timing-function;
}

@mixin transition-delay($transition-delay) {
  transition-delay: $transition-delay;
}

@mixin transition(
  $property: null,
  $duration: null,
  $timing-function: null,
  $delay: null
) {
  transition: $property $duration $timing-function $delay;
}

@mixin vertical-align($vertical-align) {
  vertical-align: $vertical-align;
}

@mixin visibility($visibility) {
  visibility: $visibility;
}

@mixin white-space($white-space) {
  white-space: $white-space;
}

@mixin width($width: null, $min: null, $max: null) {
  width: $width;
  min-width: $min;
  max-width: $max;
}

@mixin min-width($width) {
  min-width: $width;
}

@mixin max-width($width) {
  max-width: $width;
}

@mixin will-change($will-change) {
  will-change: $will-change;
}

@mixin word-spacing($word-spacing) {
  word-spacing: $word-spacing;
}

@mixin word-break($word-break) {
  word-break: $word-break;
}

@mixin word($break, $spacing) {
  word-break: $break;
  word-spacing: $spacing;
}

@mixin z-index($z-index) {
  z-index: $z-index;
}

// TBD

// TBD

// TBD

// TBD

// TBD

@mixin hover($opacity: null, $transform: null, $scale: null, $animation: null) {
  &:hover {
    opacity: $opacity;
    transform: $transform;
    scale: $scale;
    animation: $animation;
  }
}

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// This code is based on original code by Eduardo Borca, you can see it here: https://codepen.io/eduardoboucas/pen/emzRry
// It was refactored to fit the Fantastic CSS sizing convention

@mixin media($conditions...) {
  @for $i from 1 through length($conditions) {
    $conditions: set-nth(
      $conditions,
      $i,
      parse-expression(nth($conditions, $i))
    );
  }

  $branches: get-query-branches($conditions);
  $query: "";

  @each $branch in $branches {
    @if (str-length($query) != 0) {
      $query: $query + ", ";
    }

    $query: $query + $branch;
  }

  @media #{$query} {
    @content;
  }
}

@function get-query-branches($resolutions) {
  $result: "";
  $has-groups: false;

  @each $expression in $resolutions {
    @if (str-length($result) != 0) {
      $result: $result + " and ";
    }

    @if (type-of($expression) == "string") {
      $result: $result + $expression;
    } @else if (type-of($expression) == "list") {
      $result: $result + nth($expression, 1);
      $has-groups: true;
    } @else {
      @warn '#{$expression} is not a valid expression.';
    }
  }

  @if $has-groups {
    @each $expression in $resolutions {
      @if (type-of($expression) == "list") {
        $first: nth($expression, 1);

        @each $member in $expression {
          @if ($member != $first) {
            @each $partial in $result {
              $result: join(
                $result,
                str-replace-first($first, $member, $partial)
              );
            }
          }
        }
      }
    }
  }

  @return $result;
}

@function parse-expression($expression) {
  $operator: "";
  $value: "";
  $element: "";
  $result: "";
  $is-width: true;

  @if (type-of($expression) != "string") {
    @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';
  }

  @if (str-slice($expression, 2, 2) == "=") {
    $operator: str-slice($expression, 1, 2);
    $value: str-slice($expression, 3);
  } @else {
    $operator: str-slice($expression, 1, 1);
    $value: str-slice($expression, 2);
  }

  @if map-deep-has-key($media, breakpoints, $value) {
    $result: map-deep-get($media, breakpoints, $value);
  } @else if map-deep-has-key($media, resolutions, $expression) {
    $result: map-deep-get($media, resolutions, $expression);
    $is-width: false;
  } @else {
    $is-width: false;
  }

  @if ($is-width) {
    // @debug $result;
    $unit: unit($result);
    $interval: 0;

    @if (map-has-key($unit-intervals, $unit)) {
      $interval: map-get($unit-intervals, $unit);
    } @else {
      @warn 'Unknown unit: #{$unit}';
    }

    @if ($operator == ">") {
      $element: "(min-width: #{$result + $interval})";
    } @else if ($operator == "<") {
      $element: "(max-width: #{$result - $interval})";
    } @else if ($operator == ">=") {
      $element: "(min-width: #{$result})";
    } @else if ($operator == "<=") {
      $element: "(max-width: #{$result})";
    } @else {
      @warn '#{$expression} is missing an operator.';
    }
  } @else {
    $element: $result;
  }

  @return $element;
}

@function str-replace-first($search, $replace, $subject) {
  $search-start: str-index($subject, $search);

  @if $search-start == null {
    @return $subject;
  }

  $result: str-slice($subject, 0, $search-start - 1);
  $result: $result + $replace;
  $result: $result + str-slice($subject, $search-start + str-length($search));

  @return $result;
}

@function to-number($value) {
  @if type-of($value) == "number" {
    @return $value;
  } @else if type-of($value) != "string" {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == "-";
  $numbers: (
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == ".") {
      @if $character == "." {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
  }

  @return if($minus, -$result, $result);
}

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

// TBD

@mixin boxed($width: null, $max-width: null) {
  width: $width;
  max-width: $max-width;
  margin: auto !important;
  @media all and (max-width: 767px) {
    width: calc(100% - #{map-deep-get($scale, proportion, sm)});
  }
}

@mixin fullwidth {
  width: 100%;
  max-width: 100vw;
}

@mixin container {
  box-sizing: border-box;
  @include width(100%);

  &__inner {
    @include height(100%);
    @include width(100%);
    @include margin(auto);

    &--boxed {
      @include boxed;
    }
  }
}

// TBD

@mixin grid-layout(
  $grid-template-columns: null,
  $grid-cols: 1,
  $grid-cols-fr: 1fr,
  $grid-cols-gap: null,
  $grid-template-rows: null,
  $grid-rows: auto,
  $grid-rows-fr: auto,
  $grid-rows-gap: null,
  $grid-gap: null,
  $justify-items: null,
  $justify-content: null,
  $align-items: null,
  $align-content: null
) {
  /* Flexbox Fallback for older browsers */

  @include flex;

  > div {
    @include flex-basis(map-get($flex-basis, $grid-cols));
  }

  /* CSS Grid-based layout system */

  @include display(grid);
  @include grid-template-rows(repeat($grid-rows, $grid-rows-fr));
  @include grid-template-rows($grid-template-rows);
  @include grid-row-gap($grid-rows-gap);

  @include grid-template-columns(repeat($grid-cols, $grid-cols-fr));
  @include grid-template-columns($grid-template-columns);
  @include grid-column-gap($grid-cols-gap);

  @include grid-gap($grid-gap);

  @include justify-content($justify-content);
  @include justify-items($justify-items);

  @include align-content($align-content);
  @include align-items($align-items);

  @if $grid-cols == 1 {
    @include flex-direction(column);
  }
}

@mixin hide {
  display: none !important;
  opacity: 0 !important;
  pointer-events: none !important;
}

@mixin size(
  $size: null,
  $min: null,
  $max: null,
  $y: null,
  $min-y: null,
  $max-y: null,
  $x: null,
  $min-x: null,
  $max-x: null
) {
  @if $size {
    width: $size;
    height: $size;
  }
  @if $min {
    min-width: $min;
    min-height: $min;
  }
  @if $max {
    max-width: $max;
    max-height: $max;
  }
  @if $y {
    height: $y;
  }
  @if $min-y {
    min-height: $min-y;
  }
  @if $max-y {
    max-height: $max-y;
  }
  @if $x {
    width: $x;
  }
  @if $min-x {
    min-width: $min-x;
  }
  @if $max-x {
    max-width: $max-x;
  }
}
